import asyncio
import qtm_rt

qtm_connection = None  # Stocke la connexion √† QTM


async def connect_to_qtm():
    """
    Se connecter √† QTM et garder la connexion active.
    """
    global qtm_connection
    print("üîó Tentative de connexion √† QTM...")

    qtm_connection = await qtm_rt.connect("127.0.0.1")  # Connexion asynchrone

    if qtm_connection is None:
        print("üî¥ √âchec de la connexion √† QTM.")
        return False

    print("üü¢ Connect√© √† QTM.")
    return True  # Indique que la connexion a r√©ussi


async def take_control(password: str):
    """ Prendre le contr√¥le de QTM """
    global qtm_connection

    if qtm_connection is None:
        print("‚ö†Ô∏è Impossible de prendre le contr√¥le : connexion QTM absente.")
        return

    success = await qtm_connection.take_control(password)
    if success:
        print("üü¢ Contr√¥le pris sur QTM.")
    else:
        print("üî¥ √âchec de la prise de contr√¥le.")


async def create_new_capture():
    """ Cr√©er une nouvelle capture dans QTM """
    global qtm_connection

    if qtm_connection is None:
        print("‚ö†Ô∏è Impossible de cr√©er une capture : connexion QTM absente.")
        return

    capture = await qtm_connection.new()
    if capture is None:
        print("üî¥ √âchec de la cr√©ation de la capture.")
    else:
        print("üü¢ Nouvelle capture cr√©√©e.")

    return capture


async def set_capture_parameters():
    """ Configure les param√®tres de la nouvelle capture via un XML """
    global qtm_connection

    if qtm_connection is None:
        print("‚ö†Ô∏è Impossible de configurer la capture : connexion QTM absente.")
        return

    # Exemple de configuration en XML (√† adapter selon tes besoins)
    xml_configuration = """<?xml version="1.0" encoding="UTF-8"?>
    <QTM_Settings>
        <General>
            <Capture_Time>20</Capture_Time>  <!-- Dur√©e de la capture en secondes -->
            <Frequency>120</Frequency>  <!-- Fr√©quence d'acquisition -->
        </General>s
    </QTM_Settings>"""

    print("üì° Envoi des param√®tres de capture √† QTM...")
    response = await qtm_connection.send_xml(xml_configuration)

    if response:
        print("üü¢ Param√®tres de capture appliqu√©s avec succ√®s.")
    else:
        print("üî¥ √âchec de l'application des param√®tres.")


async def start_streaming():
    """ D√©marrer le streaming de donn√©es """
    global qtm_connection

    if qtm_connection is None:
        print("‚ö†Ô∏è Impossible de d√©marrer le streaming : connexion QTM absente.")
        return
    await qtm_connection.start(rtfromfile=False)


async def main():
    """ Fonction principale qui g√®re la connexion et les actions sur QTM """
    success = await connect_to_qtm()
    if not success:
        return  # Soit la connexion marche alors on essaie de prendre le controle sinon on arr√™te le programme

    # Prendre le controle avec le mot de passe que l'on a d√©fini
    await take_control("Kiks")
    await set_capture_parameters()
    capture = await create_new_capture()

    if capture is None:
        print("‚ö†Ô∏è Impossible de d√©marrer le streaming : connexion QTM absente.")
        return
    await start_streaming()

    try:
        while True:
            await asyncio.sleep(2)
    except KeyboardInterrupt:
        print("\nüõë Interruption d√©tect√©e. D√©connexion en cours...")
    finally:
        if qtm_connection:
            await qtm_connection.disconnect()
            print("‚úÖ D√©connect√© de QTM.")


if __name__ == "__main__":
    asyncio.run(main())  # Lancer la boucle principale
